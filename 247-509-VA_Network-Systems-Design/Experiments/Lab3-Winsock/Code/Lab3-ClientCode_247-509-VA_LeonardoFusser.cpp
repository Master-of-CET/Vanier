/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* FileName: UDP_client.cpp
* 
* Lab 3 - Socket Programming
* Network Systems Design (247-509-VA)
* Day Yann Fong
*
* Name: Leonardo Fusser (1946995)
*
* Description: This code sends a UDP packet that contains a customized long message entered by the
*			   user through a command prompt. This program (client) can be run by using the
*			   corresponding executable file generated by Visual Studio after building the solution.
*			   The location of the executable file depends on how the Visual Studio solution was
*			   created. With the executable file open in a command prompt (or any other terminal software),
*		       the user can pass arguments to this program, which will be the data that is sent and 
*			   received by the server. Various precautionary messearues have been implemented below.
*
* REVISION HISTORY:
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Author        	Date                Version     Comments on this revision
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Leonardo Fusser	29 September 2021	v1.0.0		Created UDP_client.cpp file
* Leonardo Fusser	24 October 2021		v1.0.1		Completed UDP_client.cpp file
*
*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


#include <iostream>					//Allows for input-output stream capabilities.
#include <winsock2.h>				//Allows for the use of Winsock APIs.
#include <Windows.h>				//Allows for the use of Windows APIs.
#pragma comment(lib,"ws2_32.lib")	//Import library.
#include <stdio.h>					//Allows for standard input-output capabilities.
#include <string.h>					//Allows for the use of string functions.

#define WIN32_LEAN_AND_MEAN
#define BUFFER_SIZE			4096	//Allocates 4'096 bytes.


/*Client main code.*/
int main(int argc, char* argv[]) {
	WSADATA		wsaData;
	SOCKET		ClientSocket;
	sockaddr_in	ClientInfo;

	char SEND[BUFFER_SIZE];			//Array that will store customized long message entered by the user in a command prompt.

	int count;											 //Local variable.
	int client_result;								     //" ".
	int i = 0;											 //" ".
	int client_length = (int)sizeof(struct sockaddr_in); //" ".


	/*************************************************************************************************/
	//[Pre-step1: Testing to see if enough arguments are passed to program]
	/*If enough arguments were passed into the program...*/
	if (argc > 1) {
		fprintf(stderr, "----------------------------------------------------------------------\n");
		fprintf(stderr, "Custom message entered: ");	//Print custom message entered by the user.
		for (count = 1; count < argc; count++) {		//For the number of arguments entered by the user...
			printf("%s ", argv[count]);					//Print the entered arguements until reached end of entered arguments.
			i += sprintf(SEND+i, "%s ", argv[count]);	//..at the same time, copy individual arguments and add them to the "SEND" array.
		}
		SEND[i] = '\0';			//Add end-of-string flag to "SEND" array once done copy and adding individual arguments to the "SEND" array.
		printf("\n");			//Newline.
	}
	/*Otherwise, complain and quit the program.*/
	else {
		fprintf(stderr, "----------------------------------------------------------------------\n");
		fprintf(stderr, "More arguments are needed when executing this program!\n");
		fprintf(stderr, "Exiting program...\n");
		fprintf(stderr, "Goodbye!\n");
		fprintf(stderr, "----------------------------------------------------------------------\n");
		WSACleanup();			//Cleanup.
		exit(0);				//Exit.
	}
	/*************************************************************************************************/

	/**************************************************************************************************/
	//[Step1: Initialize winsock]
	/*If initializing Winsock returns an error...*/
	if (WSAStartup(0x0101, &wsaData) != 0) {
		fprintf(stderr, "Could not initialize winsock! [Error number: %d]\n", WSAGetLastError());	//Prints last known error.
		fprintf(stderr, "Goodbye!\n");
		WSACleanup();			//Cleanup.
		exit(0);				//Exit.
	}
	/*Otherwise, continue with program execution.*/
	else {
		fprintf(stderr, "----------------------------------------------------------------------\n");
		fprintf(stderr, "Successfully initialized winsock! Proceeding to next step...\n");
	}
	/**************************************************************************************************/

	/**************************************************************************************************/
	//[Step2: Create datagram socket]
	ClientSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);
	/*If creating a socket returns an error...*/
	if (ClientSocket == INVALID_SOCKET) {
		fprintf(stderr, "Could not create datagram socket! [Error number: %d]\n", WSAGetLastError());	//Prints last known error.
		fprintf(stderr, "Goodbye!\n");
		WSACleanup();			//Cleanup.
		exit(0);				//Exit.
	}
	/**************************************************************************************************/

	/***********************************************************************************************/
	//[Step3: Setup info of server (address, port, type, etc...)]
	memset((void*)&ClientInfo, '\0', sizeof(struct sockaddr_in));	//Clears struct.
	ClientInfo.sin_family = AF_INET;								//Set to IPv4.
	ClientInfo.sin_port = htons(60001);								//Sets port number.
	ClientInfo.sin_addr.S_un.S_un_b.s_b1 = 127;						//IP byte 1.
	ClientInfo.sin_addr.S_un.S_un_b.s_b2 = 0;						//IP byte 2.
	ClientInfo.sin_addr.S_un.S_un_b.s_b3 = 0;						//IP byte 3.
	ClientInfo.sin_addr.S_un.S_un_b.s_b4 = 1;						//IP byte 4.
	fprintf(stderr, "Successfully initialized server info! Proceeding to next step...\n");
	fprintf(stderr, "----------------------------------------------------------------------\n");
	/***********************************************************************************************/

	/*********************************************************************************************************/
	//[Step4: Send data to server]
	client_result = sendto(ClientSocket, SEND, (int)strlen(SEND) + 1, 0, (struct sockaddr*)&ClientInfo, client_length);	//Sends new datum (UDP packet).

	/*If could not send new datum (UDP)...*/
	if (client_result == SOCKET_ERROR) { 
		fprintf(stderr, "Could not send data! [Error number: %d]\n", WSAGetLastError());
		fprintf(stderr, "Goodbye!\n");
		closesocket(ClientSocket);	//Close the socket.
		WSACleanup();				//Cleanup.
		exit(0);					//Exit.
	}
	/*Otherwise, continue with program execution.*/
	else {
		fprintf(stderr, "Successfully sent data to server! Proceeding to next step...\n");
	}
	/*********************************************************************************************************/

	/*********************************************************************************************************/
	//[Step5: When the application is finished sending, shut-down the socket]
	client_result = shutdown(ClientSocket, SD_SEND);	//Attempts to shut-down the socket.
	/*If shutting-down the socket fails...*/
	if (client_result == SOCKET_ERROR) {
		fprintf(stderr, "Shutdown failed! [Error number: %d]\n", WSAGetLastError());	//Prints last known error.
		fprintf(stderr, "Goodbye!\n");
		closesocket(ClientSocket);						//Close the socket.
		WSACleanup();									//Cleanup.
		exit(0);										//Exit.
	}
	/*Otherwise, continue with program execution.*/
	else {
		fprintf(stderr, "Successfully stopped sending to server! Proceeding to the next step...\n");
		fprintf(stderr, "----------------------------------------------------------------------\n");
	}
	/*********************************************************************************************************/

	/************************************************************************************************/
	//[Step6: When the application is finished sending, close the socket]
	/*If closing the socket doesn't yield any errors...*/
	if (closesocket(ClientSocket) == 0) {				//Close the socket.
		fprintf(stderr, "Sucessfully closed the socket! Proceeding to the next step...\n");
	}
	/*Otherwise, halt program and quit.*/
	else {
		fprintf(stderr, "Could not close the socket! [Error number: %d]\n", WSAGetLastError());
		fprintf(stderr, "Goodbye!\n");
		WSACleanup();									//Cleanup.
		exit(0);										//Exit.
	}
	/************************************************************************************************/

	/************************************************************************************************/
	//[Step7: Clean up and quit]
	fprintf(stderr, "----------------------------------------------------------------------\n");
	fprintf(stderr, "All done. Goodbye!\n");
	WSACleanup();										//Cleanup.
	return 0;
	/************************************************************************************************/
}
